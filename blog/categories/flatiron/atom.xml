<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Flatiron | The Eternal Scholar - A French Fry's Journey in Life and the Science of Operations.]]></title>
  <link href="http://simonseroussi.github.io/blog/categories/flatiron/atom.xml" rel="self"/>
  <link href="http://simonseroussi.github.io/"/>
  <updated>2014-06-11T19:23:27-04:00</updated>
  <id>http://simonseroussi.github.io/</id>
  <author>
    <name><![CDATA[Simon Seroussi]]></name>
    <email><![CDATA[simon.seroussi@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[/Regular Expressions/]]></title>
    <link href="http://simonseroussi.github.io/blog/2014/06/11/slash-regular-expressions-slash/"/>
    <updated>2014-06-11T19:18:27-04:00</updated>
    <id>http://simonseroussi.github.io/blog/2014/06/11/slash-regular-expressions-slash</id>
    <content type="html"><![CDATA[<h4>Image of the day:</h4>

<p><img src="http://imgs.xkcd.com/comics/regular_expressions.png" title="Regular Expressions" alt="alt text" /></p>

<hr />

<h4>Quote of the day:</h4>

<blockquote><p>&ldquo;Some people, when confronted with a problem, think &lsquo;I know, I&rsquo;ll use regular expressions.&rsquo;
Now they have two problems. &rdquo; &ndash; <a href="http://en.wikipedia.org/wiki/Jamie_Zawinski" title="Jamie Zawinski's Wikipedia Page"><strong>Jamie Zawinski</strong></a></p></blockquote>

<h4>What are they?</h4>

<blockquote><p>A regular expression provides a concise and flexible means to &ldquo;match&rdquo; (specify and recognize) strings of text, such as particular characters, words, or patterns of characters. Common abbreviations for &ldquo;regular expression&rdquo; include regex and regexp.
&ndash; From <a href="http://www.codecademy.com/fr/courses/javascript-intermediate-en-NJ7Lr/0/1" title="Codecademy Website"><strong>Codecademy</strong></a></p></blockquote>

<p>In other words, regular expressions are pattern finders. An easy one looks like that..</p>

<p>They can be daunting at first&hellip; but in reality can be read and writtten easily if you give them some time and attention.</p>

<h4>Exercice:</h4>

<p>In a recent lab, <a href="https://github.com/flatiron-school-students/regex_rally-ruby-005" title="Flatiron's Github Repo"><strong>Regex_rally-ruby-005</strong></a> we were asked to write a regular expression that only matches valid email addresses.</p>

<p>my_regex = _</p>

<p>Through a list of e-mails the <em>spec</em> wanted our regular expression to match <em>or</em>** not match, implicit directions on how to construct our regex are being given:</p>

<p><code>ruby
match = %w{steven@flatironschool.com john.doe@example.com phil@example.co.uk }
do_not_match = ["steven@flatironschool", "user at example.com", "user@example.com@example.com"]
</code></p>

<ol>
<li><p>The first important step is to write the opening and closing forward slashes of our regualar expressions (LE DUH.) as follows :</p></li>
<li></li>
</ol>


<h4>How to use them in your code?</h4>

<h4>When to use regex?</h4>

<h4>Useful Ressources:</h4>

<p><a href="http://rubular.com/" title="Rubular Website"><strong>Rubular</strong></a>
<a href="http://rubyxp.com/" title="Rubyxp Website"><strong>Rubyxp</strong></a>, a nice alternative to Rubular.
<a href="http://www.rexegg.com/" title="Rexegg Website"><strong>Rexegg</strong></a>
<a href="http://www.regular-expressions.info/" title="Regular-Expressions.info Website"><strong>Regular-Expressions.info</strong></a></p>
]]></content>
  </entry>
  
</feed>
